{"name": "Edit course", "status": "broken", "statusDetails": {"message": "AttributeError: 'Settings' object has no attribute 'get_base_url'", "trace": "playwright = <playwright._impl._playwright.Playwright object at 0x000001766FC08050>\n\n    @pytest.fixture(scope=\"session\")\n    def initialize_browser_state(playwright: Playwright):\n        browser = playwright.chromium.launch(headless=False)\n>       context = browser.new_context(base_url=settings.get_base_url())\n                                               ^^^^^^^^^^^^^^^^^^^^^\n\nfixtures\\browsers.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Settings(app_url=HttpUrl('https://nikita-filonov.github.io/qa-automation-engineer-ui-course'), headless=False, browser...os_dir=WindowsPath('videos'), tracing_dir=WindowsPath('tracing'), browser_state_file=WindowsPath('browser-state.json'))\nitem = 'get_base_url'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra and item in pydantic_extra:\n                return pydantic_extra[item]\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'Settings' object has no attribute 'get_base_url'\n\nvenv\\Lib\\site-packages\\pydantic\\main.py:1026: AttributeError"}, "start": 1761567572452, "stop": 1761567572452, "uuid": "be5b626a-01b6-42b6-9f4a-1d7cf53d2ef7", "historyId": "30bfcd74f478b8ae92c5ff648224dbd9", "testCaseId": "30bfcd74f478b8ae92c5ff648224dbd9", "fullName": "tests.courses.test_courses.TestCourses#test_edit_course", "labels": [{"name": "epic", "value": "LMS system"}, {"name": "parentSuite", "value": "LMS system"}, {"name": "subSuite", "value": "Courses"}, {"name": "tag", "value": "REGISTRATION"}, {"name": "story", "value": "Courses"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "COURSES"}, {"name": "suite", "value": "Courses"}, {"name": "feature", "value": "Courses"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "courses"}, {"name": "host", "value": "FB-F1232"}, {"name": "thread", "value": "17500-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.courses.test_courses"}], "titlePath": ["tests", "courses", "test_courses.py", "TestCourses"]}