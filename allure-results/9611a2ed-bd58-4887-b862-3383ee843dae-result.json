{"name": "User login with correct email and password", "status": "broken", "statusDetails": {"message": "AttributeError: 'Settings' object has no attribute 'get_base_url'", "trace": "request = <SubRequest 'chromium_page' for <Function test_successful_authorization>>\nplaywright = <playwright._impl._playwright.Playwright object at 0x0000023383900050>\n\n    @pytest.fixture\n    def chromium_page(request: SubRequest, playwright: Playwright) -> Page:\n>       yield from initialize_playwright_page(playwright, test_name=request.node.name)\n\nfixtures\\browsers.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\playwright\\pages.py:13: in initialize_playwright_page\n    base_url=settings.get_base_url(),\n             ^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Settings(app_url=HttpUrl('https://nikita-filonov.github.io/qa-automation-engineer-ui-course'), headless=False, browser...os_dir=WindowsPath('videos'), tracing_dir=WindowsPath('tracing'), browser_state_file=WindowsPath('browser-state.json'))\nitem = 'get_base_url'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra and item in pydantic_extra:\n                return pydantic_extra[item]\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'Settings' object has no attribute 'get_base_url'\n\nvenv\\Lib\\site-packages\\pydantic\\main.py:1026: AttributeError"}, "start": 1761567572452, "stop": 1761567572452, "uuid": "3dd77c6e-2a88-4e9f-9cab-9ba9291ac344", "historyId": "bcc9a804195f7b2f6ea23bcf2d5a6711", "testCaseId": "bcc9a804195f7b2f6ea23bcf2d5a6711", "fullName": "tests.authentication.test_authorization.TestAuthorization#test_successful_authorization", "labels": [{"name": "tag", "value": "AUTHORIZATION"}, {"name": "severity", "value": "blocker"}, {"name": "suite", "value": "Authentication"}, {"name": "story", "value": "Authorization"}, {"name": "epic", "value": "LMS system"}, {"name": "subSuite", "value": "Authorization"}, {"name": "tag", "value": "USER_LOGIN"}, {"name": "feature", "value": "Authentication"}, {"name": "tag", "value": "REGRESSION"}, {"name": "parentSuite", "value": "LMS system"}, {"name": "tag", "value": "authorization"}, {"name": "tag", "value": "regression"}, {"name": "host", "value": "FB-F1232"}, {"name": "thread", "value": "3964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.authentication.test_authorization"}], "titlePath": ["tests", "authentication", "test_authorization.py", "TestAuthorization"]}